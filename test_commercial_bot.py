#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ Buddah Base AI
"""

import asyncio
import logging
from config import Config
from database import db
from payments import payment_service
from ai_service import ai_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CommercialBotTester:
    
    def __init__(self):
        self.tests_run = 0
        self.tests_passed = 0
    
    def log_test(self, name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            print(f"‚úÖ {name} - PASSED {details}")
        else:
            print(f"‚ùå {name} - FAILED {details}")
        return success
    
    async def test_configuration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.log_test("Telegram Bot Token", bool(Config.TELEGRAM_BOT_TOKEN), f"- Token present")
        self.log_test("Supabase URL", bool(Config.SUPABASE_URL), f"- URL: {Config.SUPABASE_URL[:30]}...")
        self.log_test("OpenAI API Key", bool(Config.OPENAI_API_KEY), f"- Key present")
        self.log_test("YooKassa Config", bool(Config.YOOKASSA_SECRET_KEY and Config.YOOKASSA_SHOP_ID), 
                     f"- Shop: {Config.YOOKASSA_SHOP_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        self.log_test("Admins Config", len(Config.ADMINS) > 0, f"- {len(Config.ADMINS)} –∞–¥–º–∏–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É
        self.log_test("Group Config", bool(Config.CLOSED_GROUP_ID), f"- Group: {Config.CLOSED_GROUP_ID}")
        
        return True
    
    async def test_database_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            test_user = await db.get_user(999999999)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            self.log_test("Supabase Connection", True, "- Connected successfully")
        except Exception as e:
            self.log_test("Supabase Connection", False, f"- Error: {str(e)}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        try:
            materials = await db.search_materials("test", limit=1)
            self.log_test("Materials Search", True, f"- Found {len(materials)} results")
        except Exception as e:
            self.log_test("Materials Search", False, f"- Error: {str(e)}")
        
        return True
    
    async def test_payment_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YooKassa...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
            payment_data = await payment_service.create_payment(
                telegram_id=123456789,
                amount=999,
                description="Test payment"
            )
            
            if payment_data and payment_data.get('payment_url'):
                self.log_test("Payment Creation", True, f"- Payment URL generated")
            else:
                self.log_test("Payment Creation", False, "- No payment URL")
        
        except Exception as e:
            self.log_test("Payment Creation", False, f"- Error: {str(e)}")
    
    async def test_ai_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            materials = await ai_service.search_in_materials("chatgpt")
            self.log_test("AI Materials Search", True, f"- Found {len(materials)} materials")
        except Exception as e:
            self.log_test("AI Materials Search", False, f"- Error: {str(e)}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç)
            response = await ai_service.generate_ai_response("–ß—Ç–æ —Ç–∞–∫–æ–µ AI?")
            
            if response and len(response) > 10:
                self.log_test("AI Response Generation", True, f"- Generated {len(response)} chars")
            else:
                self.log_test("AI Response Generation", False, "- No response generated")
        except Exception as e:
            self.log_test("AI Response Generation", False, f"- Error: {str(e)}")
    
    def test_messages_format(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º welcome message
        welcome_msg = Config.WELCOME_MESSAGE.format(
            price=Config.SUBSCRIPTION_PRICE,
            days=Config.SUBSCRIPTION_DAYS
        )
        self.log_test("Welcome Message", len(welcome_msg) > 100, f"- Length: {len(welcome_msg)} chars")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º success message
        success_msg = Config.PAYMENT_SUCCESS_MESSAGE.format(
            days=Config.SUBSCRIPTION_DAYS,
            ai_limit=Config.DAILY_AI_LIMIT,
            invite_link="https://t.me/test"
        )
        self.log_test("Success Message", len(success_msg) > 100, f"- Length: {len(success_msg)} chars")
        
        return True
    
    async def test_user_workflow(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ workflow"""
        print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ workflow...")
        
        test_user_id = 987654321
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await db.create_user(
                telegram_id=test_user_id,
                name="Test User",
                username="testuser",
                chat_id=test_user_id
            )
            self.log_test("User Creation", success, "- Test user created")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await db.get_user(test_user_id)
            self.log_test("User Retrieval", user is not None, f"- User status: {user.get('status') if user else 'None'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            is_active = await db.is_subscription_active(test_user_id)
            self.log_test("Subscription Check", not is_active, "- Inactive as expected")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            activated = await db.activate_subscription(test_user_id)
            self.log_test("Subscription Activation", activated, "- Subscription activated")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            is_active_now = await db.is_subscription_active(test_user_id)
            self.log_test("Active Subscription Check", is_active_now, "- Now active")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤
            can_request = await db.can_make_ai_request(test_user_id)
            self.log_test("AI Request Limit", can_request, "- Can make AI requests")
            
        except Exception as e:
            self.log_test("User Workflow", False, f"- Error: {str(e)}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*60)
        print("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò BUDDAH BASE AI")
        print("="*60)
        
        success_rate = (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {self.tests_passed}")
        print(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.tests_run - self.tests_passed}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   ‚Ä¢ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {Config.SUBSCRIPTION_PRICE} ‚ÇΩ")
        print(f"   ‚Ä¢ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {Config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π")
        print(f"   ‚Ä¢ –õ–∏–º–∏—Ç AI: {Config.DAILY_AI_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
        print(f"   ‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {len(Config.ADMINS)}")
        
        if success_rate >= 80:
            print(f"\nüéâ –ë–û–¢ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            print(f"‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        elif success_rate >= 60:
            print(f"\n‚ö†Ô∏è –ë–æ—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")
        else:
            print(f"\n‚ùå –ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
            print(f"üõ† –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        
        return success_rate >= 80
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Buddah Base AI")
        print("=" * 60)
        
        await self.test_configuration()
        await self.test_database_connection()
        await self.test_payment_service()
        await self.test_ai_service()
        self.test_messages_format()
        await self.test_user_workflow()
        
        return self.generate_report()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = CommercialBotTester()
    is_ready = await tester.run_all_tests()
    
    return 0 if is_ready else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)