import logging
import schedule
import time
import asyncio
from datetime import datetime
from database import db
from config import Config

logger = logging.getLogger(__name__)

class DailyCronJob:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    
    @staticmethod
    async def reset_daily_ai_limits():
        """–°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            success = await db.reset_daily_requests()
            if success:
                logger.info("‚úÖ Daily AI limits reset successfully")
            else:
                logger.error("‚ùå Failed to reset daily AI limits")
        except Exception as e:
            logger.error(f"Error resetting daily AI limits: {e}")
    
    @staticmethod
    async def cleanup_expired_subscriptions():
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = await db.get_active_users()
            
            deactivated_count = 0
            for user in active_users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                is_active = await db.is_subscription_active(user['id'])
                
                if not is_active:
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    success = await db.supabase.table('buddah_base_ai').update({
                        'status': 'inactive'
                    }).eq('id', user['id']).execute()
                    
                    if success.data:
                        deactivated_count += 1
                        logger.info(f"Deactivated expired subscription for user {user['id']}")
            
            logger.info(f"‚úÖ Processed expired subscriptions: {deactivated_count} users deactivated")
            
        except Exception as e:
            logger.error(f"Error cleaning up expired subscriptions: {e}")

def schedule_daily_tasks():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ AI –≤ 00:00 MSK
    schedule.every().day.at("00:00").do(
        lambda: asyncio.run(DailyCronJob.reset_daily_ai_limits())
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ 01:00 MSK
    schedule.every().day.at("01:00").do(
        lambda: asyncio.run(DailyCronJob.cleanup_expired_subscriptions())
    )
    
    logger.info("‚úÖ Daily tasks scheduled")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    logger.info("üïê Starting task scheduler...")
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

class BotUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞"""
    
    @staticmethod
    def format_subscription_end_date(iso_date_string: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            if not iso_date_string:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ü–∞—Ä—Å–∏–º ISO –¥–∞—Ç—É
            date_obj = datetime.fromisoformat(iso_date_string.replace('Z', '+00:00'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            return date_obj.strftime("%d.%m.%Y %H:%M")
        except Exception as e:
            logger.error(f"Error formatting date {iso_date_string}: {e}")
            return "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã"
    
    @staticmethod
    def validate_material_data(title: str, tags: str, url: str) -> tuple:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        errors = []
        
        if not title or len(title.strip()) < 3:
            errors.append("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        
        if not tags or len(tags.strip()) < 2:
            errors.append("–¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        
        if not url or not (url.startswith('http://') or url.startswith('https://')):
            errors.append("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        
        is_valid = len(errors) == 0
        return is_valid, errors
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 100) -> str:
        """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
        if len(text) <= max_length:
            return text
        
        return text[:max_length-3] + "..."
    
    @staticmethod
    def format_user_stats(user_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        name = user_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        username = user_data.get('username', '–±–µ–∑ username')
        daily_requests = user_data.get('daily_requests', 0) or 0
        subscription_end = user_data.get('subscription_to_date')
        
        stats = f"üë§ **{name}** (@{username})\n"
        stats += f"ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {daily_requests}/{Config.DAILY_AI_LIMIT}\n"
        
        if subscription_end:
            formatted_date = BotUtils.format_subscription_end_date(subscription_end)
            stats += f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {formatted_date}\n"
        
        return stats

# –≠–∫–∑–µ–º–ø–ª—è—Ä —É—Ç–∏–ª–∏—Ç
bot_utils = BotUtils()