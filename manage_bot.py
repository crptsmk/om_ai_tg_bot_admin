#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º - —Å—Ç–∞—Ä—Ç, —Å—Ç–æ–ø, —Å—Ç–∞—Ç—É—Å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
"""

import subprocess
import sys
import time
import signal
import psutil
from pathlib import Path

class BotManager:
    def __init__(self):
        self.bot_script = "bot.py"
        self.log_file = "bot.log"
    
    def get_bot_process(self):
        """–ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞"""
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if 'python' in proc.info['name'] and any('bot.py' in cmd for cmd in proc.info['cmdline']):
                    return proc
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return None
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.get_bot_process():
            print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return False
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        subprocess.Popen([
            sys.executable, self.bot_script
        ], stdout=open(self.log_file, 'w'), stderr=subprocess.STDOUT)
        
        time.sleep(2)
        
        if self.get_bot_process():
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            return False
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        proc = self.get_bot_process()
        if not proc:
            print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        try:
            proc.terminate()
            proc.wait(timeout=10)
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except psutil.TimeoutExpired:
            print("‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            proc.kill()
            print("‚úÖ –ë–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        self.stop_bot()
        time.sleep(1)
        return self.start_bot()
    
    def status(self):
        """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        proc = self.get_bot_process()
        if proc:
            print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {proc.pid})")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {proc.cpu_percent():.1f}%")
            print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {proc.memory_info().rss / 1024 / 1024:.1f} MB")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            if Path(self.log_file).exists():
                print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                try:
                    with open(self.log_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        for line in lines[-5:]:
                            print(f"   {line.strip()}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            
            return True
        else:
            print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
    
    def logs(self, lines=20):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        if not Path(self.log_file).exists():
            print("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                log_lines = f.readlines()
                for line in log_lines[-lines:]:
                    print(line.rstrip())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def main():
    if len(sys.argv) < 2:
        print("ü§ñ Buddah Base Bot Manager")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  start    - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        print("  stop     - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        print("  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        print("  status   - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        print("  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        print("\n–ü—Ä–∏–º–µ—Ä: python manage_bot.py start")
        return
    
    manager = BotManager()
    command = sys.argv[1].lower()
    
    if command == "start":
        manager.start_bot()
    elif command == "stop":
        manager.stop_bot()
    elif command == "restart":
        manager.restart_bot()
    elif command == "status":
        manager.status()
    elif command == "logs":
        lines = int(sys.argv[2]) if len(sys.argv) > 2 else 20
        manager.logs(lines)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()