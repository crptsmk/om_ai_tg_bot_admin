import logging
import openai
from typing import Optional, List, Dict, Any
from config import Config
from database import db

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self):
        openai.api_key = Config.OPENAI_API_KEY
        self.client = openai.OpenAI(api_key=Config.OPENAI_API_KEY)
    
    async def search_in_materials(self, query: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        try:
            materials = await db.search_materials(query, limit=5)
            return materials
        except Exception as e:
            logger.error(f"Error searching materials: {e}")
            return []
    
    async def generate_ai_response(self, question: str, materials: List[Dict[str, Any]] = None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            context = ""
            if materials:
                context = "\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
                for material in materials[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    context += f"- {material['title']}: {material.get('url', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n"
            
            system_prompt = """–¢—ã AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Buddah Base - —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∞–π—Å—è.
–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –¥–∞–π –æ–±—â–∏–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ AI/–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π/–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

–°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, —Å —ç–º–æ–¥–∑–∏."""

            user_prompt = f"–í–æ–ø—Ä–æ—Å: {question}{context}"
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"Error generating AI response: {e}")
            return None
    
    async def process_monk_request(self, telegram_id: int, question: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /monk —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            if not await db.is_subscription_active(telegram_id):
                return "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            if not await db.can_make_ai_request(telegram_id):
                return f"ü§ñ –õ–∏–º–∏—Ç AI-–≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {Config.DAILY_AI_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ú–°–ö."
            
            # –ò—â–µ–º –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            materials = await self.search_in_materials(question)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            ai_response = await self.generate_ai_response(question, materials)
            
            if ai_response:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                await db.increment_daily_requests(telegram_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                response = f"ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Buddah Base:\n\n{ai_response}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                if materials:
                    response += "\n\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:"
                    for material in materials[:3]:
                        response += f"\n‚Ä¢ {material['title']}"
                        if material.get('url'):
                            response += f" - {material['url']}"
                
                user = await db.get_user(telegram_id)
                remaining = Config.DAILY_AI_LIMIT - ((user.get('daily_requests', 0) or 0))
                response += f"\n\nüí° –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining}"
                
                return response
            else:
                return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
                
        except Exception as e:
            logger.error(f"Error processing monk request: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
ai_service = AIService()