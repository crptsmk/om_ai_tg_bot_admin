import logging
import io
import csv
from typing import List, Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from database import db
from config import Config

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self):
        self.admins = Config.ADMINS
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admins
    
    async def get_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="admin_add_material")],
            [InlineKeyboardButton("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="admin_export_csv")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã AI", callback_data="admin_reset_ai")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def get_users_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            active_users = await db.get_active_users()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_active = len(active_users)
            total_requests_today = sum(user.get('daily_requests', 0) or 0 for user in active_users)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
            payment_methods = {}
            for user in active_users:
                method = user.get('payment_method', 'Unknown')
                payment_methods[method] = payment_methods.get(method, 0) + 1
            
            return {
                'total_active': total_active,
                'total_requests_today': total_requests_today,
                'payment_methods': payment_methods,
                'active_users': active_users
            }
        except Exception as e:
            logger.error(f"Error getting user stats: {e}")
            return {}
    
    async def export_users_csv(self) -> io.StringIO:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
        try:
            active_users = await db.get_active_users()
            
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'ID', 'Name', 'Username', 'Status', 'Created At', 
                'Subscription To', 'Payment Method', 'Daily Requests'
            ])
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user in active_users:
                writer.writerow([
                    user.get('id', ''),
                    user.get('name', ''),
                    user.get('username', ''),
                    user.get('status', ''),
                    user.get('created_at', ''),
                    user.get('subscription_to_date', ''),
                    user.get('payment_method', ''),
                    user.get('daily_requests', 0)
                ])
            
            output.seek(0)
            return output
            
        except Exception as e:
            logger.error(f"Error exporting CSV: {e}")
            return None
    
    async def prepare_broadcast_message(self, message_text: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            active_users = await db.get_active_users()
            user_ids = [user['chatid'] for user in active_users if user.get('chatid')]
            
            return {
                'message_text': message_text,
                'recipient_count': len(user_ids),
                'user_ids': user_ids
            }
        except Exception as e:
            logger.error(f"Error preparing broadcast: {e}")
            return {}
    
    def format_stats_message(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        if not stats:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Buddah Base AI**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats.get('total_active', 0)}
‚Ä¢ AI-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('total_requests_today', 0)}

üí≥ **–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:**"""
        
        for method, count in stats.get('payment_methods', {}).items():
            message += f"\n‚Ä¢ {method}: {count}"
        
        return message
    
    def format_users_list(self, users: List[Dict[str, Any]], page: int = 0, per_page: int = 10) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not users:
            return "üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        start = page * per_page
        end = start + per_page
        page_users = users[start:end]
        
        message = f"üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** (—Å—Ç—Ä. {page + 1}):\n\n"
        
        for i, user in enumerate(page_users, start=start+1):
            name = user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            username = user.get('username', '–±–µ–∑ username')
            requests = user.get('daily_requests', 0) or 0
            subscription = user.get('subscription_to_date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')[:10] if user.get('subscription_to_date') else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            
            message += f"{i}. **{name}** (@{username})\n"
            message += f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {requests}/{Config.DAILY_AI_LIMIT}\n"
            message += f"   ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {subscription}\n\n"
        
        total_pages = (len(users) + per_page - 1) // per_page
        message += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
        
        return message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel = AdminPanel()