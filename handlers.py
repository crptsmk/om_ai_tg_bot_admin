import logging
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import ContextTypes
from config import Config
from messages import BotMessages

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotHandlers:
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        message = BotMessages.format_message(
            BotMessages.START_MESSAGE, 
            Config.ADMIN_CONTACT
        )
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info(f"Start command from user {update.effective_user.id}")

    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        message = BotMessages.format_message(
            BotMessages.GROUP_INFO_MESSAGE, 
            Config.ADMIN_CONTACT
        )
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info(f"Help command from user {update.effective_user.id}")

    @staticmethod
    async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        message = BotMessages.format_message(
            BotMessages.MAIN_INFO_MESSAGE, 
            Config.ADMIN_CONTACT
        )
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info(f"Info command from user {update.effective_user.id}")

    @staticmethod
    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return

        message_text = update.message.text.lower()
        user_id = update.effective_user.id
        chat_type = update.message.chat.type
        
        logger.info(f"Message from user {user_id} in {chat_type}: {message_text[:50]}...")

        # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        # 2. –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        # 3. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        is_group = chat_type in ['group', 'supergroup']
        bot_mentioned = '@saint_buddah_bot' in message_text or 'saint_buddah' in message_text
        is_reply_to_bot = (update.message.reply_to_message and 
                          update.message.reply_to_message.from_user and
                          update.message.reply_to_message.from_user.is_bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        has_join_keywords = any(keyword in message_text for keyword in Config.JOIN_KEYWORDS)
        has_files_keywords = any(keyword in message_text for keyword in Config.FILES_KEYWORDS)
        has_engagement_keywords = any(keyword in message_text for keyword in Config.ENGAGEMENT_KEYWORDS)
        
        # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –æ—Ç–≤–µ—á–∞–µ–º –≤—Å–µ–≥–¥–∞, –≤ –≥—Ä—É–ø–ø–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        should_respond = (not is_group) or bot_mentioned or is_reply_to_bot or has_join_keywords or has_files_keywords or has_engagement_keywords
        
        if not should_respond:
            logger.info(f"Ignoring message in group without trigger")
            return

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤: —Ñ–∞–π–ª—ã > –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ > –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ > —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Ñ–∞–π–ª–æ–≤ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if has_files_keywords:
            response = BotMessages.format_message(
                BotMessages.FILES_REQUEST_MESSAGE, 
                Config.ADMIN_CONTACT
            )
            await update.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Sent files request message to user {user_id}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏
        elif has_join_keywords:
            response = BotMessages.format_message(
                BotMessages.MAIN_INFO_MESSAGE, 
                Config.ADMIN_CONTACT
            )
            await update.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Sent join info to user {user_id}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        elif has_engagement_keywords:
            response = BotMessages.format_message(
                BotMessages.ENGAGEMENT_MESSAGE, 
                Config.ADMIN_CONTACT
            )
            await update.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Sent engagement message to user {user_id}")
        
        # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω—É–ª–∏ –±–æ—Ç–∞, –Ω–æ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif bot_mentioned or is_reply_to_bot:
            response = BotMessages.format_message(
                BotMessages.START_MESSAGE, 
                Config.ADMIN_CONTACT
            )
            await update.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Sent start message to user {user_id} (bot mentioned)")
        
        # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif not is_group:
            response = BotMessages.format_message(
                BotMessages.START_MESSAGE, 
                Config.ADMIN_CONTACT
            )
            await update.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Sent start message to user {user_id} (private chat fallback)")

    @staticmethod
    async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.inline_query.query.lower() if update.inline_query.query else ""
        
        results = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞–∑–∞—Ç—å
        if "—Ñ–∞–π–ª" in query or "–¥–∞–π—Ç–µ" in query or "—Å–∫–∏–Ω—å" in query or "–ø—Ä–æ–º–ø—Ç" in query:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–∞–π–ª–∞—Ö
            results.append(
                InlineQueryResultArticle(
                    id="files_request",
                    title="üìÅ –•–æ—á–µ—à—å —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ–º–ø—Ç—ã?",
                    description="2000+ –ø—Ä–æ–º–ø—Ç–æ–≤, —à–∞–±–ª–æ–Ω—ã, AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                    input_message_content=InputTextMessageContent(
                        message_text=BotMessages.format_message(
                            BotMessages.FILES_REQUEST_MESSAGE, 
                            Config.ADMIN_CONTACT
                        ),
                        parse_mode='Markdown'
                    )
                )
            )
        
        if not query or "–≤—Å—Ç—É–ø–∏—Ç—å" in query or "–¥–æ—Å—Ç—É–ø" in query:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏
            results.append(
                InlineQueryResultArticle(
                    id="join_info",
                    title="üíé –ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ Buddah Base",
                    description="–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VEO 3 –∏ –ø–æ–¥–ø–∏—Å–∫–µ –∑–∞ 999‚ÇΩ",
                    input_message_content=InputTextMessageContent(
                        message_text=BotMessages.format_message(
                            BotMessages.MAIN_INFO_MESSAGE, 
                            Config.ADMIN_CONTACT
                        ),
                        parse_mode='Markdown'
                    )
                )
            )
        
        if not query or "–∏–Ω—Ç–µ—Ä–µ—Å–Ω" in query or "–∫—Ä—É—Ç–æ" in query or "veo" in query:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            results.append(
                InlineQueryResultArticle(
                    id="engagement",
                    title="üî• –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è?",
                    description="–ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ VEO 3 –∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º",
                    input_message_content=InputTextMessageContent(
                        message_text=BotMessages.format_message(
                            BotMessages.ENGAGEMENT_MESSAGE, 
                            Config.ADMIN_CONTACT
                        ),
                        parse_mode='Markdown'
                    )
                )
            )
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        results.append(
            InlineQueryResultArticle(
                id="group_info",
                title="üìå –û –≥—Ä—É–ø–ø–µ Buddah Base",
                description="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø—ã –∏ —á—Ç–æ –≤–Ω—É—Ç—Ä–∏",
                input_message_content=InputTextMessageContent(
                    message_text=BotMessages.format_message(
                        BotMessages.GROUP_INFO_MESSAGE, 
                        Config.ADMIN_CONTACT
                    ),
                    parse_mode='Markdown'
                )
            )
        )
        
        await update.inline_query.answer(results, cache_time=300)
        logger.info(f"Answered inline query: '{query}' with {len(results)} results")

    @staticmethod
    async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        for member in update.message.new_chat_members:
            welcome_message = BotMessages.format_message(
                BotMessages.GROUP_INFO_MESSAGE, 
                Config.ADMIN_CONTACT
            )
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}!\n\n{welcome_message}", 
                parse_mode='Markdown'
            )
            logger.info(f"Welcomed new member: {member.first_name} (ID: {member.id})")

    @staticmethod
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")