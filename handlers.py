import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from database import db
from payments import payment_service
from ai_service import ai_service
from admin_panel import admin_panel
from group_manager import GroupManager

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self):
        self.group_manager = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ bot.py
    
    def set_group_manager(self, group_manager: GroupManager):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø—ã"""
        self.group_manager = group_manager
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        logger.info(f"Start command from user {user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        db_user = await db.get_user(user.id)
        
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await db.create_user(
                telegram_id=user.id,
                name=user.full_name or user.first_name or "Unknown",
                username=user.username or "",
                chat_id=chat_id
            )
            if success:
                logger.info(f"Created new user {user.id}")
            
            db_user = await db.get_user(user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if await db.is_subscription_active(user.id):
            # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            message = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!

‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ AI-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {Config.DAILY_AI_LIMIT - (db_user.get('daily_requests', 0) or 0)}

üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/monk [–≤–æ–ø—Ä–æ—Å] - AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
/materials [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
            
            await update.message.reply_text(message)
        else:
            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
            message = Config.WELCOME_MESSAGE.format(
                price=Config.SUBSCRIPTION_PRICE,
                days=Config.SUBSCRIPTION_DAYS
            )
            
            keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
    
    @staticmethod
    async def monk_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monk –¥–ª—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Buddah Base\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monk [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /monk –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ n8n?"
            )
            return
        
        question = " ".join(context.args)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        processing_msg = await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        response = await ai_service.process_monk_request(user_id, question)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await processing_msg.delete()
        await update.message.reply_text(response)
    
    @staticmethod
    async def materials_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /materials –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if not await db.is_subscription_active(user_id):
            keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                reply_markup=reply_markup
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if not context.args:
            await update.message.reply_text(
                "üìö –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ Buddah Base\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /materials [–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /materials –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ChatGPT"
            )
            return
        
        query = " ".join(context.args)
        
        # –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials = await db.search_materials(query, limit=10)
        
        if materials:
            response = f"üìö –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            
            for i, material in enumerate(materials, 1):
                response += f"{i}. **{material['title']}**\n"
                if material.get('url'):
                    response += f"   üîó {material['url']}\n"
                if material.get('tags'):
                    response += f"   üè∑ {material['tags']}\n"
                response += "\n"
        else:
            response = f"üìö –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É: /monk {query}"
        
        await update.message.reply_text(response, disable_web_page_preview=True)
    
    @staticmethod
    async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        user = await db.get_user(user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        is_active = await db.is_subscription_active(user_id)
        
        if is_active:
            daily_requests = user.get('daily_requests', 0) or 0
            remaining_requests = Config.DAILY_AI_LIMIT - daily_requests
            subscription_end = user.get('subscription_to_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10] if user.get('subscription_to_date') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            message = f"""‚úÖ **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –ê–ö–¢–ò–í–ù–ê**

üë§ –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üÜî Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {subscription_end}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {user.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}

ü§ñ **AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {daily_requests}/{Config.DAILY_AI_LIMIT}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}

üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/monk [–≤–æ–ø—Ä–æ—Å] - AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
/materials [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        else:
            message = f"""‚ùå **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –ù–ï–ê–ö–¢–ò–í–ù–ê**

üë§ –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üÜî Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:"""
            
            keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
            return
        
        await update.message.reply_text(message)
    
    @staticmethod
    async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        if not admin_panel.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        keyboard = await admin_panel.get_admin_keyboard()
        
        await update.message.reply_text(
            "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Buddah Base AI**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    @staticmethod
    async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ (–ú–û–î–ï–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê)"""
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –§—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        if not update.message or update.message.chat.id != Config.CLOSED_GROUP_ID:
            return
        
        user_id = update.effective_user.id
        message_id = update.message.message_id
        thread_id = getattr(update.message, 'message_thread_id', None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º
        logger.info(f"Group message from user {user_id} in thread {thread_id}: message_id {message_id} (MODERATION DISABLED)")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        group_manager = context.bot_data.get('group_manager')
        if not group_manager:
            return
        
        # –ú–û–î–ï–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê - —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ):
        # if await group_manager.should_delete_message(user_id, thread_id):
        #     deleted = await group_manager.delete_message(Config.CLOSED_GROUP_ID, message_id)
        #     if deleted:
        #         logger.info(f"Deleted message {message_id} from user {user_id} in thread {thread_id}")
        
        return  # –í—ã—Ö–æ–¥–∏–º –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handlers = BotHandlers()