import logging
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from database import db
from payments import payment_service
from admin_panel import admin_panel

logger = logging.getLogger(__name__)

class CallbackHandlers:
    
    @staticmethod
    async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_data = await payment_service.create_payment(
            telegram_id=user_id,
            amount=Config.SUBSCRIPTION_PRICE,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ Buddah Base AI –Ω–∞ {Config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π",
            return_url=f"https://t.me/{context.bot.username}"
        )
        
        if payment_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
            await db.update_user_payment(user_id, payment_data['payment_url'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_data['payment_url'])],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_data['payment_id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"""üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**

üí∞ –°—É–º–º–∞: {Config.SUBSCRIPTION_PRICE} ‚ÇΩ
‚è± –°—Ä–æ–∫: {Config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
            
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @staticmethod
    async def handle_check_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.callback_query
        await query.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
        
        user_id = query.from_user.id
        callback_data = query.data
        payment_id = callback_data.replace("check_payment_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        telegram_id = await payment_service.process_successful_payment(payment_id)
        
        if telegram_id and telegram_id == user_id:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = await db.activate_subscription(user_id)
            
            if success:
                # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                group_manager = context.bot_data.get('group_manager')
                invite_link = None
                
                if group_manager:
                    invite_link = await group_manager.create_invite_link(expire_hours=1, member_limit=1)
                    
                    if invite_link:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        await db.save_invite_link(user_id, invite_link)
                        logger.info(f"Created and saved one-time invite link for user {user_id}")
                    else:
                        logger.error(f"Failed to create invite link for user {user_id}")
                        invite_link = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @smkbdh"
                else:
                    invite_link = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @smkbdh"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                success_message = Config.PAYMENT_SUCCESS_MESSAGE.format(
                    days=Config.SUBSCRIPTION_DAYS,
                    ai_limit=Config.DAILY_AI_LIMIT,
                    invite_link=invite_link
                )
                
                await query.edit_message_text(success_message, disable_web_page_preview=True)
                
                logger.info(f"User {user_id} successfully activated subscription with one-time invite link")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
        else:
            await query.edit_message_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª.\n\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    
    @staticmethod
    async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if not admin_panel.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        callback_data = query.data
        
        if callback_data == "admin_users":
            stats = await admin_panel.get_users_stats()
            active_users = stats.get('active_users', [])
            
            message = admin_panel.format_users_list(active_users, page=0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ
            keyboard = []
            if len(active_users) > 10:
                keyboard.append([
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_0"),
                    InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="admin_users_1")
                ])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
        
        elif callback_data == "admin_stats":
            stats = await admin_panel.get_users_stats()
            message = admin_panel.format_stats_message(stats)
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
        
        elif callback_data == "admin_broadcast":
            await query.edit_message_text(
                "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
            )
            context.user_data['admin_action'] = 'broadcast'
        
        elif callback_data == "admin_add_material":
            await query.edit_message_text(
                "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–µ–≥–∏ | URL\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è ChatGPT | chatgpt, –ø—Ä–æ–º–ø—Ç—ã, ai | https://example.com\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
            )
            context.user_data['admin_action'] = 'add_material'
        
        elif callback_data == "admin_export_csv":
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º CSV
            csv_data = await admin_panel.export_users_csv()
            
            if csv_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                csv_file = io.BytesIO(csv_data.getvalue().encode('utf-8'))
                csv_file.name = f"buddah_base_users_{context.bot_data.get('export_timestamp', 'export')}.csv"
                
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=csv_file,
                    caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text("‚úÖ CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        elif callback_data == "admin_reset_ai":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã AI
            success = await db.reset_daily_requests()
            
            if success:
                message = "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã AI —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
        
        elif callback_data == "admin_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
            keyboard = await admin_panel.get_admin_keyboard()
            
            await query.edit_message_text(
                "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Buddah Base AI**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
    
    @staticmethod
    async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∫–∏"""
        user_id = update.effective_user.id
        
        if not admin_panel.is_admin(user_id):
            return
        
        admin_action = context.user_data.get('admin_action')
        
        if admin_action == 'broadcast':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            message_text = update.message.text
            
            if message_text == '/cancel':
                await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                context.user_data.pop('admin_action', None)
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            broadcast_data = await admin_panel.prepare_broadcast_message(message_text)
            
            if broadcast_data:
                sent_count = 0
                failed_count = 0
                
                for chat_id in broadcast_data['user_ids']:
                    try:
                        await context.bot.send_message(chat_id, message_text)
                        sent_count += 1
                    except Exception as e:
                        failed_count += 1
                        logger.error(f"Failed to send broadcast to {chat_id}: {e}")
                
                result_message = f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                await update.message.reply_text(result_message)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
            
            context.user_data.pop('admin_action', None)
        
        elif admin_action == 'add_material':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            message_text = update.message.text
            
            if message_text == '/cancel':
                await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                context.user_data.pop('admin_action', None)
                return
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            parts = message_text.split(' | ')
            
            if len(parts) != 3:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –¢–µ–≥–∏ | URL"
                )
                return
            
            title, tags, url = parts
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –±–∞–∑—É
            success = await db.add_material(
                title=title.strip(),
                tags=tags.strip(),
                url=url.strip(),
                added_by=update.effective_user.username or str(user_id)
            )
            
            if success:
                await update.message.reply_text(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
            
            context.user_data.pop('admin_action', None)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
callback_handlers = CallbackHandlers()