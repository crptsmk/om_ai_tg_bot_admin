#!/usr/bin/env python3
"""
Buddah Base AI - –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π Telegram –±–æ—Ç
–§—É–Ω–∫—Ü–∏–∏:
- –ü—Ä–∏–µ–º –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ
- AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —á–µ—Ä–µ–∑ OpenAI
- –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–µ—Ç–æ–∫
"""

import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)

from config import Config
from database import db
from handlers import handlers
from callback_handlers import callback_handlers
from group_manager import GroupManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('buddah_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BuddahBaseBot:
    def __init__(self):
        self.application = None
        self.group_manager = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not Config.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø—ã
        self.group_manager = GroupManager(self.application.bot)
        handlers.set_group_manager(self.group_manager)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.bot_data['group_manager'] = self.group_manager
        self.application.bot_data['export_timestamp'] = datetime.now().strftime("%Y%m%d_%H%M")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", handlers.start_command))
        self.application.add_handler(CommandHandler("monk", handlers.monk_command))
        self.application.add_handler(CommandHandler("materials", handlers.materials_command))
        self.application.add_handler(CommandHandler("status", handlers.status_command))
        self.application.add_handler(CommandHandler("admin", handlers.admin_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(
            CallbackQueryHandler(callback_handlers.handle_payment_callback, pattern="^pay_subscription$")
        )
        self.application.add_handler(
            CallbackQueryHandler(callback_handlers.handle_check_payment_callback, pattern="^check_payment_")
        )
        self.application.add_handler(
            CallbackQueryHandler(callback_handlers.handle_admin_callback, pattern="^admin_")
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ (–ú–û–î–ï–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê)
        # –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:
        # self.application.add_handler(
        #     MessageHandler(
        #         filters.Chat(Config.CLOSED_GROUP_ID) & ~filters.COMMAND,
        #         handlers.handle_group_message
        #     )
        # )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
        self.application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
                callback_handlers.handle_admin_message
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if context.error and str(context.error) not in ['Message is not modified']:
            try:
                error_message = f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{str(context.error)}"
                for admin_id in Config.ADMINS:
                    try:
                        await context.bot.send_message(admin_id, error_message)
                        break  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∞–¥–º–∏–Ω—É
                    except:
                        continue
            except:
                pass
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.initialize()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Buddah Base AI –±–æ—Ç–∞...")
        logger.info(f"üì± Admin contact: @{Config.ADMIN_CONTACT}")
        logger.info(f"üë• –ì—Ä—É–ø–ø–∞: {Config.CLOSED_GROUP_ID}")
        logger.info(f"üîß –ê–¥–º–∏–Ω—ã: {Config.ADMINS}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
            test_user = await db.get_user(0)  # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É
            group_info = await self.group_manager.get_group_info()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group_info.get('title', 'Unknown')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(drop_pending_updates=True)
        
        logger.info("‚úÖ Buddah Base AI –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = f"""üöÄ **Buddah Base AI –±–æ—Ç –∑–∞–ø—É—â–µ–Ω**

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ –í–µ—Ä—Å–∏—è: –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è v1.0
‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"""
        
        for admin_id in Config.ADMINS:
            try:
                await self.application.bot.send_message(admin_id, startup_message)
                break
            except:
                continue
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.Event().wait()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
        logger.info("üõë Buddah Base AI –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = BuddahBaseBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")